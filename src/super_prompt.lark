start: expr

expr: sexp | name | val | string

val: NUMBER

name: SNAME

sexp: "(" (let_form | cond_form | case_form | if_form | or_form | and_form | math_form | comp_form | str_for | loose_match_form | question_form) ")"

let_form: "let" metadata? "[" binding* "]" expr
binding: name expr

metadata: "^" dict -> metadata

key_value: SYMBOL expr

cond_form: "cond" cond_clause*
cond_clause: expr expr

case_form: "case" expr case_clause*
case_clause: string expr

if_form: "if" expr expr expr

or_form: "or" expr+

and_form: "and" expr+

math_form: math_op expr expr
math_op: "+" | "-" | "="

comp_form: comp_op expr expr
comp_op: ">" | "<" | ">=" | "<="

loose_match_form: "~=" expr expr

str_form: "str" expr+

question_form: "?" string

SNAME: /[A-Za-z*+!_?<>=%&][A-Za-z0-9*+!_?<>=%&-]*/i

str_for: "str" expr+

NUMBER: /\d+/i

info_string: DOUBLE_QUOTED_SINGLE_LINE
string: DOUBLE_QUOTED_STRING
DOUBLE_QUOTED_STRING: /"(?:[^"\\]|\\.|\n)*"/s
DOUBLE_QUOTED_SINGLE_LINE: /"(?:[^"\\]|\\.)*"/s


dict: "{" key_value_pair_list "}"
key_value_pair_list: key_value_pair (","? key_value_pair)*
key_value_pair: key value
key: ":" SYMBOL

value: string | number | list | dict

list: "[" value_list "]"
value_list: (value ","?)*

number: SIGNED_INT | FLOAT
SIGNED_INT: /-?\d+/i
FLOAT: /-?\d+\.\d+/i


SYMBOL: /[A-Za-z][-A-Za-z0-9]*/i

%import common.WS
%ignore WS
